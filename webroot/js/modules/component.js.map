{"version":3,"names":[],"mappings":"","sources":["component.js"],"sourcesContent":["import Editor from \"./editor.js\";\nimport Modal from \"./modal.js\";\n\n/**\n * Component\n * \n */\nexport default class Component {\n\t/**\n\t * \n\t * @param {*} handler \n\t * @param {*} element \n\t */\n\tconstructor(handler, element = null) {\n\t\tthis.Handler = handler;\n\n\t\tif (typeof element == \"object\" && element.nodeType) {\n\t\t\tthis.element = element;\n\t\t} else if (typeof element == \"string\") {\n\t\t\tthis.element = this.createElement(element);\n\t\t}\n\t\t\n\t\tthis.id = this.element.dataset.id;\n\t\tthis.region = this.element.dataset.region;\n\t\t\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * initialize\n\t * \n\t */\n\tinitialize() {\n\t\tthis.content = this.element.querySelector('[name=content]');\n\t\tthis.select = this.element.querySelector('[name=template_id]');\n\t\tthis.deleteButton = this.element.querySelector('[name=delete]');\n\t\tthis.toggleButton = this.element.querySelector('[name=toggle]');\n\t\tthis.moveHandle = this.element.querySelector('[name=move]');\n\t\tthis.slots = this.element.querySelectorAll('.layout-slot[value=\"' + this.id + '\"]');\n\n\t\tthis.deleteButton.addEventListener('click', () => this.delete());\n\t\tthis.select.addEventListener('change', () => this.switch({\n\t\t\ttemplate_id: this.select.value\n\t\t}));\n\n\t\tthis.addEditor();\n\t\tthis.addMedia();\n\n\t\tthis.slots.forEach(slot => {\n\t\t\tlet newButton = slot.querySelector('[name=new-slot]');\n\t\t\tnewButton.addEventListener('click', () => this.newSlot(slot));\n\t\t});\n\t}\n\n\tnewSlot(container) {\n\t\tthis.Handler.postFetch(this.Handler.Actions.new, {\n\t\t\tregion: container.getAttribute('name'),\n\t\t\tparentId: this.id\n\t\t}).then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tlet component = new Component(this.Handler, html);\n\t\t\t\tcontainer.appendChild(component.element);\n\t\t\t\tthis.Handler.components.push(component);\n\n\t\t\t\tthis.Handler.setup(component.element);\n\t\t\t});\n\t}\n\n\tasync save() {\n\t\tlet data = await this.getContent();\n\t\tdata.id = this.id;\n\n\t\tthis.Handler.postFetch(this.Handler.Actions.save, data);\n\t}\n\n\tasync switch(data) {\n\t\tdata.id = this.id;\n\t\tdata.templat_id = this.select.value;\n\n\t\tthis.Handler.postFetch(this.Handler.Actions.switch, data)\n\t\t\t.then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tlet elementNew = new Component(this.Handler, html);\n\t\t\t\tthis.element.parentElement.insertBefore(elementNew.element, this.element);\n\t\t\t\tthis.destroy();\n\n\t\t\t\tthis.Handler.setup(elementNew.element);\n\t\t\t});\n\t}\n\n\tasync delete() {\n\t\tthis.Handler.postFetch(this.Handler.Actions.delete, {\n\t\t\tid: this.id\n\t\t}).then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tthis.destroy();\n\t\t\t});\n\t}\n\n\t/**\n\t * createElement\n\t * \n\t * @param {*} html \n\t * @returns \n\t */\n\tcreateElement(html) {\n\t\tlet template = document.createElement('template');\n\t\ttemplate.innerHTML = html.trim();\n\n\t\tlet element = template.content.firstChild;\n\t\treturn element;\n\t}\n\n\t/**\n\t * addEditor\n\t * \n\t * @returns \n\t */\n\taddEditor() {\n\t\tlet editorElement = this.element.querySelector('.editor');\n\n\t\tif (!editorElement) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet parentElement = editorElement.closest('.layout-element');\n\t\tif (this.element.dataset.id != parentElement.dataset.id) {\n\t\t\treturn;\n\t\t}\n\n\t\t// let container = this.element.querySelector('.element-container');\n\t\t// this.content = container.querySelectorAll('textarea[name=\"content\"]');\n\n\t\tthis.editor = new Editor(editorElement, this.content.value);\n\t}\n\n\t/**\n\t * addMedia\n\t * \n\t * @returns \n\t */\n\taddMedia() {\n\t\tlet mediaButton = this.element.querySelector('[name=mediaButton]');\n\n\t\tif (!mediaButton) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.Modal) {\n\t\t\tthis.Modal = new Modal(this);\n\t\t}\n\n\t\tlet modal = this.Modal.newModal(mediaButton, false);\n\t\tthis.Modal.addQuery(modal);\n\n\t\tmediaButton.addEventListener('click', () => {\n\t\t\tfetch(mediaButton.value)\n\t\t\t\t.then(response => response.text())\n\t\t\t\t.then(text => {\n\t\t\t\t\tthis.Modal.addContent(modal, text);\n\t\t\t\t\tthis.Modal.openModal(modal);\n\t\t\t\t});\n\t\t});\n\n\t\tmodal.addEventListener('confirm', (e) => {\n\t\t\tlet selected = modal.querySelector('input[type=radio]:checked');\n\n\t\t\tthis.media.value = selected.value;\n\n\t\t\tthis.elementHandler.updateContent(\n\t\t\t\t'update',\n\t\t\t\tthis.select.dataset.url,\n\t\t\t\tthis,\n\t\t\t\t{ media: this.media.value },\n\t\t\t);\n\t\t});\n\n\t\tmodal.addEventListener('close', (e) => {\n\t\t\tthis.Modal.reset(modal);\n\t\t});\n\t}\n\n\t/**\n\t * get\n\t * \n\t * @returns \n\t */\n\tasync getContent() {\n\t\tlet data = {\n\t\t\tid: this.id,\n\t\t};\n\n\t\tif (this.editor) {\n\t\t\tlet editorData = await this.editor.save();\n\t\t\tthis.content.value = JSON.stringify(editorData);\n\t\t\tthis.content.innerHTML = this.content.value;\n\t\t}\n\n\t\tdata.content = this.content ? this.content.value : null;\n\t\treturn data;\n\t}\n\n\t/**\n\t * destroy\n\t */\n\tdestroy() {\n\t\tlet index = this.Handler.components.indexOf(this);\n\t\n\t\tif (index > -1) { // only splice array when item is found\n\t\t\tthis.Handler.components.splice(index, 1);\n\t\t}\n\n\t\tif (this.editor) {\n\t\t\tthis.editor.destroy();\n\t\t}\n\n\t\tthis.element.remove();\n\t\tdelete this;\n\t}\n}"],"file":"component.js"}