{"version":3,"names":[],"mappings":"","sources":["componentsHandler.js"],"sourcesContent":["// import DragDrop from \"./dragdrop.js\";\nimport Component from \"./component.js\";\n\n/**\n * \n */\nexport default class ComponentsHandler {\n\t/**\n\t * \n\t * @param {*} main \n\t */\n\tconstructor(main) {\n\t\tthis.main = main;\n\n\t\tif (this.main.debug) {\n\t\t\tconsole.debug(\"LayoutComponents::const\");\n\t\t}\n\n\t\tthis.Config = {\n\t\t\tnewButtonSelector: 'button[name=new-component]',\n\t\t\tlayoutContainerSelector: '.layout-container',\n\t\t\tcomponentSelector: '.layout-element',\n\t\t\tsaveButton: '.layout-button[name=save]'\n\t\t}\n\n\t\tthis.Actions = {\n\t\t\tnew: \t'/rhino/components/new/',\n\t\t\tsave: '/rhino/components/save_all/',\n\t\t\tswitch: '/rhino/components/switch/',\n\t\t\tdelete: '/rhino/components/delete/',\n\t\t}\n\n\t\tthis.containers = {};\n\t\tthis.components = [];\n\n\t\tlet layoutContainers = document.querySelector(this.Config.layoutContainerSelector);\n\t\t\n\t\t// this.DragDrop = new DragDrop();\n\t\t\t\n\t\tif (layoutContainers) {\n\t\t\tthis.saveButton = document.querySelector(this.Config.saveButton);\n\t\t\tthis.saveButton.addEventListener('click', () => this.save());\n\t\t\tdocument.addEventListener('keydown', (e) => {\n\t\t\t\tif (e.ctrlKey && e.keyCode === 83) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.save();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.setup(document);\n\t\t}\n\t}\n\t\n\t/**\n\t * setup\n\t */\n\tsetup(parentNode) {\n\t\tthis.pageId = this.main.getPageId();\n\n\t\tthis.newButtons = parentNode.querySelectorAll(this.Config.newButtonSelector);\n\t\tthis.componentElements = parentNode.querySelectorAll(this.Config.componentSelector);\n\t\tthis.layoutContainers = parentNode.querySelectorAll(this.Config.layoutContainerSelector);\n\t\t\n\t\tthis.layoutContainers.forEach(container => {\n\t\t\tthis.containers[container.getAttribute('name')] = container;\n\t\t});\n\t\t\n\t\tthis.newButtons.forEach(newButton => {\n\t\t\tnewButton.addEventListener('click', () => {\n\t\t\t\tthis.newComponent(newButton.value);\n\t\t\t});\n\t\t});\n\t\t\n\t\tthis.componentElements.forEach(nodeElement => {\n\t\t\tlet component = new Component(this, nodeElement);\n\t\t\tthis.components.push(component);\n\t\t});\n\t}\n\n\t/**\n\t * postFetch\n\t * \n\t * @param {*} url \n\t * @param {*} data \n\t * @returns \n\t */\n\tasync postFetch(url, data = '') {\n\t\tdocument.body.classList.add('layout-loading');\n\t\tlet response = await fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'X-CSRF-Token': this.main.getToken(),\n\t\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t\t},\n\t\t\tcredentials: \"same-origin\",\n\t\t\tbody: JSON.stringify(data)\n\t\t});\n\t\tdocument.body.classList.remove('layout-loading');\n\t\treturn response;\n\t}\n\n\t/**\n\t * newComponent\n\t * \n\t * @param {*} url \n\t * @param {*} name \n\t */\n\tnewComponent(region) {\n\t\tlet container = this.containers[region];\n\t\t\n\t\tthis.postFetch(this.Actions.new, {\n\t\t\tregion: region,\n\t\t\tparentId: container.getAttribute('value')\n\t\t}).then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tlet component = new Component(this, html);\n\t\t\t\tcontainer.appendChild(component.element);\n\t\t\t\tthis.components.push(component);\n\n\t\t\t\tthis.setup(component.element);\n\t\t\t});\n\t}\n\n\t/**\n\t * updateContent\n\t * \n\t * @param {*} action \n\t * @param {*} url \n\t * @param {*} element \n\t * @param {*} data \n\t */\n\tasync updateContent(action, url, element, data = {}) {\n\t\tif (action == 'save') {\n\t\t\tdata = await element.getContent();\n\t\t}\n\n\t\tthis.postFetch(url, data)\n\t\t\t.then((response) => response.text())\n\t\t\t.then((html) => {\n\t\t\t\tif (action == 'update') {\n\t\t\t\t\tlet elementNew = new Element(this, html);\n\t\t\t\t\telement.container.insertBefore(elementNew.nodeElement, element.nodeElement);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (action == 'delete' || action == 'update') {\n\t\t\t\t\telement.destroy();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * setPosition (Depricated)\n\t * \n\t * @param {*} element \n\t * @param {*} position \n\t */\n\tsetPosition(element, position) {\n\t\tlet id = element.id.replace('element-', '');\n\t\tlet url = '/rhino/contents/update/' + id\n\n\t\tif (position < 0) {\n\t\t\tposition = 0;\n\t\t}\n\n\t\tthis.updateContent('move', url, element, { position: position });\n\t}\n\n\tasync save() {\n\t\tlet data = [];\n\t\tthis.components.forEach(component => {\n\t\t\tdata.push(this.prepareContent(component));\n\t\t});\n\n\t\tPromise.all(data)\n\t\t\t.then((result) => {\n\t\t\t\tthis.postFetch(this.Actions.save, result);\n\t\t\t});\n\t}\n\n\tasync prepareContent(component) {\n\t\treturn await component.getContent();\n\t}\n}"],"file":"componentsHandler.js"}